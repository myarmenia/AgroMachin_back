<?php

namespace App\Services\Dictionary;

use App\Models\Language;
use App\Models\LanguageSection;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\File;
use Illuminate\Support\Facades\Storage;

class DictionaryService
{

    // public static function create(string|array $language, $sections)
    // {

    //     $file_created = false;
    //     $path_directories = base_path().'/lang';
    //     $directories = File::directories($path_directories);

    //     // Create directories if not exists
    //     $language_dir =  $path_directories.'/'.$language;

    //     if (!File::isDirectory($language_dir)){
    //         File::makeDirectory($language_dir, 0755);
    //     }
    //     // Parse all directories within the lang folder
    //     $translation_files = [];
    //     foreach ($directories as $dir){

    //         $files = File::allFiles($dir);

    //         foreach ($files as $file){
    //             array_push($translation_files, $dir.'/'.File::basename($file));
    //         }
    //     }

    //     foreach ($sections as $k => $section) {
    //         if($section != null){
    //             $existing_path = null;
    //             foreach ($directories as $dir){
    //                 if(in_array("$dir/$section.php", $translation_files)){
    //                     $existing_path = "$dir/$section.php";
    //                 }
    //             }

    //             $new_path = "$path_directories/$language/$section.php";

    //             // Create file content
    //             $content = "<?php\n\n";
    //             $content .= "return [\n\n";
    //             $content .= "    /*\n";
    //             $content .= "    |--------------------------------------------------------------------------\n";
    //             $content .= "    | STATIC STRINGS TRANSLATIONS\n";
    //             $content .= "    |--------------------------------------------------------------------------\n";
    //             $content .= "    |\n";
    //             $content .= "    |  !!! WARNING - This is a file generated by the LanguagesService. !!!\n";
    //             $content .= "    |  You should not modify it, as it shall be replaced next time this service is executed.\n";
    //             $content .= "    |\n";
    //             $content .= "    */\n\n";

    //             if(is_file($existing_path) && !is_file($new_path)){

    //                 $file_content =  include $existing_path;

    //                 if(is_array($file_content) && count($file_content)>1){
    //                     foreach ($file_content as $key => $value){
    //                         $content .= "'$key'=>'', \n";
    //                     }
    //                 }

    //                 // Generate file
    //                 $content .="\n];";
    //                 $file_created = File::put( "$language_dir/$section.php", $content);

    //             }

    //             if(!is_file($existing_path)){

    //                 $content .="\n];";
    //                 $file_created = File::put( "$language_dir/$section.php", $content);
    //             }

    //         }


    //     }


    //     return $file_created;

    // }

    public static function get_dictionary_keys($language_id = null, $section = null){

        $language = '';
        if($language_id == null){
            $language = Language::first();
            $language_id = $language->id;
        }
        else{
            $language = Language::find($language_id);

        }
        if($section == null){
            $section = LanguageSection::where('language_id', $language_id)->first('name');
        }

        $path_directories = base_path().'/lang';
        // $directories = File::directories($path_directories);
        $all_keys = [];
        $language_dir =  $path_directories.'/'.$language->name;
// dd($language_dir);

                    $files = File::allFiles($language_dir);

                    foreach ($files as $file){
                        $file_content =  include $file;

                        if(is_array($file_content) && count($file_content)>1){
                            array_push($all_keys, $file_content);
                        }
                    }

        return $all_keys;

    }

}
